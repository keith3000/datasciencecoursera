swirl()
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r-version=="3.1.1", country=="US")
filter(cran, r_version=="3.1.1", country=="US")
?comparison
?Comparison
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, country=="US"|country=="IN")
filter(cran, size>100500 & r_os=="linux-gnu")
filter(cran, size>100500 , r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, r_version==!is.na(r_version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, c(ip_id, package, size))
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size=size+1000)
summarize(cran, avg_bytes=mean(size))
library(dplyr)
tbl_df(mydf)
cran <- tbl+df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran, package)
by_package
summarize(cran, mean(size))
summarize(by_package, mean(size))
submit()
submit()
reset()
submit()
pack_sum <- summarize(by_package,
count = n(package),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
pack_sum <- summarize(by_package,
count = n(),
unique = n_distinct(ip_id),
countries = n_distinct(country),
avg_bytes = mean(size))
skip
?swirl
swirl()
skip()
pack_sum
quantile(pack_sum$count, probs=0.99)
top_counts <- filter(paxck_sum, count>679)
top_counts <- filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
view(top_counts_sorted)
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
cran %>%
select(ip_id, country, package, size) %>%
print
swirl()
?swirl()
swirl()
View(cran)
submit()
submit()
reset()
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
skip()
submit()
skip
swirl()
submit()
skip()
submit()
skip()
submit()
skip()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
library(swirl)
swirl()
library(swirl)
swirl()
swirl()
swirl()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, Bodyweight)
xyplot(weight ~ Time | Diet, BodyWeight)
str(BodyWeight)
splom(BodyWeight)
?xyplot
updateR
updateR()
SWIRL()
swirl()
library(swirl)
swilr()
swirl()
install.packages("swirl")
install.packages("swirl")
install_from_swirl("Statistical Inference")
swirl()
swirl()
1/4
33/36
deck
52
4/52
(4/52)*(4/52)*(4/52)*(4/52)
skip()
12/52
3/51
2/51
1.8*.8
1.6*.8
(1.6*.8)/2
.64
mypdf
skip()
exit()
swirl()
library(dplyr)
library(lubridate)
library(ggplot2)
## Unzip file
unzip("exdata-data-household_power_consumption.zip")
## create data table from file
colClasses <- c("character","character",rep("numeric",7))
rawpower <- read.table("household_power_consumption.txt", na.strings="?", sep=";", header=TRUE, colClasses=colClasses)
colClasses <- c("character","character",rep("numeric",7))
## combine date and time columns into single merged date/time column
power <- mutate(rawpower, Time=(paste(Date,"/", Time)))
## convert time and date columns from character to time variable
power <- mutate(power, Time=dmy_hms(Time))
## subset 2 days of interest
power <- power[power$Date=="1/2/2007" | power$Date=="2/2/2007",]
##
library(dplyr)
library(lubridate)
library(ggplot2)
## Unzip file
unzip("exdata-data-household_power_consumption.zip")
## create data table from file
colClasses <- c("character","character",rep("numeric",7))
rawpower <- read.table("household_power_consumption.txt", na.strings="?", sep=";", header=TRUE, colClasses=colClasses)
colClasses <- c("character","character",rep("numeric",7))
## combine date and time columns into single merged date/time column
power <- mutate(rawpower, Time=(paste(Date,"/", Time)))
## convert time and date columns from character to time variable
power <- mutate(power, Time=dmy_hms(Time))
## subset 2 days of interest
power <- power[power$Date=="1/2/2007" | power$Date=="2/2/2007",]
##
library(dplyr)
library(lubridate)
library(ggplot2)
## Unzip file
unzip("exdata-data-household_power_consumption.zip")
## create data table from file
colClasses <- c("character","character",rep("numeric",7))
rawpower <- read.table("household_power_consumption.txt", na.strings="?", sep=";", header=TRUE, colClasses=colClasses)
colClasses <- c("character","character",rep("numeric",7))
## combine date and time columns into single merged date/time column
power <- mutate(rawpower, Time=(paste(Date,"/", Time)))
## convert time and date columns from character to time variable
power <- mutate(power, Time=dmy_hms(Time))
## subset 2 days of interest
power <- power[(power$Date=="1/2/2007" | power$Date=="2/2/2007"),]
##
library(dplyr)
library(lubridate)
library(ggplot2)
## Unzip file
unzip("exdata-data-household_power_consumption.zip")
## create data table from file
colClasses <- c("character","character",rep("numeric",7))
rawpower <- read.table("household_power_consumption.txt", na.strings="?", sep=";", header=TRUE, colClasses=colClasses)
colClasses <- c("character","character",rep("numeric",7))
## combine date and time columns into single merged date/time column
power <- mutate(rawpower, Time=(paste(Date,"/", Time)))
## convert time and date columns from character to time variable
power <- mutate(power, Time=dmy_hms(Time))
## subset 2 days of interest
power <- power[(power$Date=="1/2/2007"|"2/2/2007"),]
##
library(dplyr)
library(lubridate)
library(ggplot2)
## Unzip file
unzip("exdata-data-household_power_consumption.zip")
## create data table from file
colClasses <- c("character","character",rep("numeric",7))
rawpower <- read.table("household_power_consumption.txt", na.strings="?", sep=";", header=TRUE, colClasses=colClasses)
colClasses <- c("character","character",rep("numeric",7))
## combine date and time columns into single merged date/time column
power <- mutate(rawpower, Time=(paste(Date,"/", Time)))
## convert time and date columns from character to time variable
power <- mutate(power, Time=dmy_hms(Time))
## subset 2 days of interest
power <- power[power$Date=="1/2/2007"|"2/2/2007",]
?pnorm()
qnorm(95, 1100, 75, lower.tail=FALSE)
qnorm(.95, 1100, 75, lower.tail=FALSE)
x<- qnorm(.95, 1100, 75, lower.tail=FALSE)
x
x<- qnorm(.95, 1100, 75)
x
x<- qnorm(.95, 1100, 75)
x
qnorm(95, 1100,)
pnorm(.93, mean=100, sd=10)
pnorm(.93, mean=100, sd=10)*100
pnorm(93, mean=100, sd=10)*100
qnorm(95, mean=100, sd=10)
qnorm(.95, mean=100, sd=10)
qnorm(.95, mean=1100, sd=75)
qnorm(.95, mean=1100, sd=75/10)
?ppois
?pbinom
?q
dbinom(4, size=5, prob=0.5)
pbinom(4, size=5, prob=0.5)
1 - (pbinom(4, size=5, prob=0.5))
pnorm(14, mean=15, sd=10)
pnorm(14, mean=15, sd=10) +
pnorm(15, mean=15, sd=10) +
pnorm(16, mean=15, sd=10)
pnorm(14, mean=15, sd=10)
pnorm(14, mean=15, sd=10)
pnorm(15, mean=15, sd=10)
pnorm(16, mean=15, sd=10)
?ppois
ppois(10, lambda=5, lower=FALSE)
ppois(10, lambda=5, lower=TRUE)
ppois(3.3 lambda=5, lower=TRUE)
ppois(3.3 lambda=5)
ppois(3 lambda=5)
ppois(3.3, lambda=5)
?pbinom
pbinom(4, size=5, lower.tail=FALSE)
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
swirl()
1/6
sum(1:6)/6
expect_dice
dice_HIGH
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
skip()
swirl()
dice_sqr
swirl()
swirl()
swirl()
coinPlot(10)
coinPlot(10000)
qnorm(.95)
skip()
skip()
skipo()
skip()
skip()
skip()
skip()
skip()
lpad.packages("readr")
load.packages("readr")
load.package("readr")
install.packages("readr")
?readr
?read_csv
?readr
??readr
install.packages("readr")
?readr
library(readr)
?readr
?read_csv
dir
wd
dir()
setwd("C:/Users/Keith/Desktop/files_for_classes/reproData/peerAssessment1")
dir()
library(readr)
library(dplyr)
da <- read_csv("activity.csv")
View(df)
View(da)
tail(da)
da
is.na*da$steps)
is.na(da$steps)
str(da)
glimpse(na)
glimpse(da)
table(da$steps)
table(da)
ggplot(da)
library(readr)
library(dplyr)
library(ggplot2)
df <- read_csv("activity.csv")
```
problems()
problems(...)
qplot(df)
str(df$steps)
sum(is.na(da$steps))
df$steps[1600]
?read.csv
dc <- read.csv("activity.csv", stringsFactors=FALSE)
dc <- read.csv("activity.csv", na.strings="NA")
str(dc)
dc$steps[1600]
df <- read_csv("activity.csv")
?read_csv
```{r}
library(readr)
library(dplyr)
library(ggplot2)
df <- read_csv("activity.csv", "i, D, i")
dc <- read.csv("activity.csv", na.strings="NA")
df <- read_csv("activity.csv", col_namnes=TRUE, list("i, D, i")
df <- read_csv("activity.csv", col_namnes=TRUE, list("i, D, i"))
df <- read_csv("activity.csv", col_names=TRUE, list("i, D, i"))
df <- read_csv("activity.csv", col_types="iDi"))
df <- read_csv("activity.csv", col_types="iDi")
View(df)
dc$steps[1600]
df$steps[1600]
dc$steps[1600]
glimpse(df)
group_by(df, date)
?group_by
df %>% group_by(date) %>% summarise(number_steps=sum(steps), mean_steps=mean(steps), median=median(steps), na.rm=TRUE )
df %>% group_by(date) %>% summarise(number_steps=sum(steps), mean_steps=mean(steps), median=median(steps))
View(df)
dfs <- group_by(df, date) %>% summarise(number_steps=sum(steps), mean_steps=mean(steps), median=median(steps))
View(dfs)
dfs <- group_by(df, date) %>% summarise(number_steps=sum(steps), mean_steps=mean(steps), median_steps=median(steps))
View(dfs)
table(dfs)
summary(dfs)
dfs
qplot(dfs, x=day, y=number_steps)
qplot(dfs, x=date, y=number_steps)
qgplot(dfs, y=number_steps)
qplot(dfs, y=number_steps)
qplot(dfs, x=number_steps)
hist(dfs$number_steps, col="red", main="Steps per Day")
hist(dfs$date, col="red", main="Steps per Day")
hist(dfs, col="red", main="Steps per Day")
hist(dfs, x=date, col="red", main="Steps per Day")
hist(dfs$date)
qplot(date, number_steps, data=dfs)
qplot(date, data=dfs)
qplot(date, number_steps, data=dfs)
qplot(date, number_steps, data=dfs, geom=bar)
qplot(date, number_steps, data=dfs, geom=histogram)
ggplot(date, number_steps, data=dfs, geom=histogram)
ggplot(aes(x=date, y+number_steps), data=dfs, geom=histogram)
ggplot(dfs, aes(date, number_steps)) + geom_histogram() +
labs(x="Year 1999 to 2008") +
labs(y="PM2.5 Baltimore Total Emissions by Type") +
theme_tufte()
ggplot(dfs, aes(date, number_steps)) + geom_histogram() +
labs(x="Year 1999 to 2008") +
labs(y="PM2.5 Baltimore Total Emissions by Type")
ggplot(dfs, aes(date, number_steps)) + geom_histogram(stat=bin) +
labs(x="Year 1999 to 2008") +
labs(y="PM2.5 Baltimore Total Emissions by Type")
ggplot(dfs, aes(date, number_steps)) + geom_histogram(stat=bin) +
labs(x="Year 1999 to 2008") +
labs(y="PM2.5 Baltimore Total Emissions by Type")
ggplot(dfs, aes(date, number_steps)) + geom_histogram()
ggplot(dfs, aes(date, number_steps)) + geom_histogram(binwidth=1)
ggplot(dfs, aes(date, number_steps)) + geom_bar())
ggplot(dfs, aes(date, number_steps)) + geom_bar()
ggplot(dfs, aes(date, number_steps)) + geom_bar(stat="identity")
ggplot(dfs, aes(date, number_steps)) + geom_bar(stat="identity", color=date)
ggplot(dfs, aes(date, number_steps)) + geom_bar(stat="identity", color=blue)
ggplot(dfs, aes(date, number_steps)) +
geom_bar(stat="identity") +
scale_fill_gradient(low="white", high="blue")
ggplot(dfs, aes(date, number_steps)) +
geom_bar(stat="identity") +
scale_fill_gradient()
ry(ggplot2)
library(ggthemes)
ggplot(dfs, aes(date, number_steps)) +
geom_bar(stat="identity") +
theme_tufte()
qplot(dfs$steps, geom="histogram")
qplot(df$steps, geom="histogram")
qplot(df$steps, geom="histogram", na.rm=TRUE)
qplot(df$steps, geom="histogram", na.rm=TRUE, binwidth=x)
qplot(df$steps, geom="histogram", na.rm=TRUE, binwidth=date)
ggplot(data=dfs, aes(dfs$steps)) + geom_histogram()
ggplot(data=df, aes(df$steps)) + geom_histogram()
---
First, read data file from local directory using the new readr package that improves on the base R read.csv. readr autmatically converts the date column ot the date class of data.
```{r, echo=TRUE}
library(readr)
library(dplyr)
library(ggplot2)
library(ggthemes)
df <- read_csv("activity.csv", col_types="iDi")
```
calculate sum, median and mean steps per day. display results for the 60 days.
```{r, echo=TRUE}
dfs <- group_by(df, date) %>% summarise(number_steps=sum(steps))
dfs
ggplot(data=dfs, aes(dfs$steps)) + geom_histogram()
ggplot(data=dfs, aes(x=dfs$steps)) + geom_histogram()
ggplot(data=dfs, aes(dfs$steps)) + geom_histogram(dfs$steps)
ggplot(data=dfs, aes(dfs$steps)) + geom_histogram(dfs$date)
View(df)
View(dfs)
hist(dfs$number_steps)
ggplot(data=dfs, aes(dfs$snumber_steps)) + geom_histogram()
ggplot(data=dfs, aes(dfs$number_steps)) + geom_histogram()
ggplot(data=dfs, aes(dfs$number_steps)) + geom_histogram(color="blue")
library(RColorBrewer)
ggplot(data=dfs, aes(dfs$number_steps)) +
geom_histogram() +
scale_fill_brewer(palette="Blues")
ggplot(data=dfs, aes(dfs$number_steps)) +
geom_histogram(aes(fill=fl))
ggplot(data=dfs, aes(dfs$number_steps)) +
geom_histogram(aes(fill="green"))
ggplot(data=dfs, aes(dfs$number_steps)) +
geom_histogram(aes(fill=dfs$number_steps))
ggplot(data=dfs, aes(dfs$number_steps)) +
geom_histogram()
dfs %>% mutate(mean=mean(number_steps)) %>% mutate(median=median(number_steps))
View(dfs)
dfs <- mutate(dfs, mean=mean(number_steps)) %>% mutate(median=median(number_steps))
View(dfs)
dfs <- group_by(df, date) %>% summarise(number_steps=sum(steps)) %>%
mutate(mean=mean(number_steps)) %>%
mutate(median=median(number_steps))
View(dfs)
dfs <- group_by(df, date) %>% summarise(number_steps=sum(steps), mean=mean(number_steps))
View(dfs)
dfs <- group_by(df, date) %>% summarise(number_steps=sum(steps), mean=mean(number_steps), median=median(number_steps), na.rm=TRUE)
View(dfs)
df <- filter(df, !is.na(steps)
df <- filter(df, !is.na(steps))
View(df)
df <- read_csv("activity.csv", col_types="iDi")
# filter out NAs
df <- filter(df, steps=!is.na(steps))
View(df)
df <- read_csv("activity.csv", col_types="iDi")
View(df)
setwd("C:/Users/Keith/Desktop/files_for_classes/reproData/peerAssessment1")
dir
ls()
dir()
df <- read_csv("activity.csv", col_types="iDi")
View(df)
df <- read_csv("activity.csv", col_types="iDi")
str(df)
View(df)
